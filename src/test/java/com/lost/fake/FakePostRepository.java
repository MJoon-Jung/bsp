//package com.lost.fake;
//
//import com.lost.image.service.repository.ImagePostRepository;
//import com.lost.post.domain.LostItem;
//import com.lost.post.domain.Post;
//import com.lost.post.infra.entity.PostJpaEntity;
//import com.lost.post.service.repository.PostRepository;
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Objects;
//import java.util.Optional;
//import java.util.concurrent.atomic.AtomicLong;
//import lombok.Builder;
//
//public class FakePostRepository implements PostRepository {
//
//    private final AtomicLong autoGeneratedId = new AtomicLong(1L);
//    private final List<PostJpaEntity> data = new ArrayList<>();
//    private final UserRepository userRepository;
//    private final ImagePostRepository imagePostRepository;
//
//    @Builder
//    public FakePostRepository(UserRepository userRepository, ImagePostRepository imagePostRepository) {
//        this.userRepository = userRepository;
//        this.imagePostRepository = imagePostRepository;
//    }
//
//    @Override
//    public Post save(Post post) {
//        Long postId = post.getId();
//        if (postId == null) {
//            post = Post.builder()
//                    .id(autoGeneratedId.getAndIncrement())
//                    .title(post.getTitle())
//                    .content(post.getContent())
//                    .reward(post.getReward())
//                    .tradeType(post.getTradeType())
//                    .writer(post.getWriter())
//                    .lostItem(LostItem.builder()
//                            .name(post.getLostItem().getName())
//                            .address(post.getLostItem().getAddress())
//                            .images(post.getLostItem().getImages())
//                            .build())
//                    .status(post.getStatus())
//                    .finder(post.getFinder())
//                    .createdAt(post.getCreatedAt())
//                    .updatedAt(post.getUpdatedAt())
//                    .build();
//        } else {
//            data.removeIf(item -> Objects.equals(item.getId(), postId));
//        }
//
//        PostJpaEntity postJpaEntity = PostJpaEntity.from(post);
//        data.add(postJpaEntity);
//        imagePostRepository.saveAll(postJpaEntity.getImagePostJpaEntities());
//        userRepository.save(postJpaEntity.getUserJpaEntity());
//
//        return postJpaEntity.toModel();
//    }
//
//    @Override
//    public Optional<Post> findById(Long postId) {
//        return data.stream()
//                .filter(post -> post.getId().equals(postId))
//                .findAny()
//                .map(PostJpaEntity::toModel);
//    }
//}
