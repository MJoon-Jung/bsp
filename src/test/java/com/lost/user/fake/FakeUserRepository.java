package com.lost.user.fake;

import com.lost.user.domain.User;
import com.lost.user.infra.entity.UserJpaEntity;
import com.lost.user.service.repostiory.UserRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(1L);
    private final List<UserJpaEntity> data = new ArrayList<>();

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream()
                .filter(user -> user.getEmail().equals(email))
                .findAny()
                .map(UserJpaEntity::toModel);
    }

    @Override
    public User save(User user) {
        Long userId = user.getId();
        if (userId == null) {
            user = User.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .password(user.getPassword())
                    .role(user.getRole())
                    .createdAt(user.getCreatedAt())
                    .updatedAt(user.getUpdatedAt())
                    .build();
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), userId));
        }
        data.add(UserJpaEntity.from(user));
        return user;
    }

    @Override
    public Optional<User> findById(Long userId) {
        return data.stream()
                .filter(user -> user.getId().equals(userId))
                .findAny()
                .map(UserJpaEntity::toModel);
    }
}
